name: Upcoming Date Alert

on:
    # Run action at midnight on the 25th of each month
    schedule:
        - cron: '0 0 25 * *'
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

jobs:
    # This workflow contains a single job called "check-dates"
    check-dates:
        runs-on: ubuntu-latest
        steps:
            # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: development

            # JS to scan files for dates
            - name: Scan files for dates
              run: |
                  const fs = require('fs');
                  const path = require('path');
                  
                  // Define regex pattern to match dates
                  const datePattern = /(January|February|March|April|May|June|July|August|September|October|November|December).{0,6} [0-9]{4}/;
                  
                  // Function to recursively search for dates in Markdown files
                  const scanFilesForDates = (directory) => {
                      const dateLines = [];
                  
                      // Recursive function to search for dates
                      const searchForDates = (directory) => {
                          const files = fs.readdirSync(directory);
                  
                          for (const file of files) {
                              const filePath = path.join(directory, file);
                              const stats = fs.statSync(filePath);
                  
                              if (stats.isDirectory()) {
                                  searchForDates(filePath); // Recursive call for subdirectories
                              } else if (file.endsWith('.md')) {
                                  const lines = fs.readFileSync(filePath, 'utf8').split('\n');
                                  lines.forEach((line, lineNumber) => {
                                      if (line.match(datePattern)) {
                                          dateLines.push(`${filePath}:${lineNumber + 1}:${line.trim()}`);
                                      }
                                  });
                              }
                          }
                      };
                  
                      searchForDates(directory);
                      return dateLines;
                  };              

                  // Scan files for dates in the specified directory
                  const dateLines = scanFilesForDates('content/en/docs');

                  // Print filename, line number, and text containing dates
                  dateLines.forEach((dateLine) => {
                      const [filename, lineNumber, lineText] = dateLine.split(':');
                      console.log(`File: ${filename}`);
                      console.log(`Line: ${lineNumber}`);
                      console.log(`Text: ${lineText}`);
                      console.log("---");
                  });

                  // Set outputs for subsequent steps
                  const scanOutput = dateLines.join('\n');
                  console.log(`::set-output name=scan_output::${scanOutput}`);

            # Create GitHub issue, based on https://docs.github.com/en/actions/managing-issues-and-pull-requests/scheduling-issue-creation
            - name: Create GitHub issue
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GH_REPO: ${{ github.repository }}
                  TITLE: "Upcoming Dates Search: Check if Updates Are Needed"
                  BODY: |
                      if [[ -n "${{ steps.check-dates.outputs.scan_output }}" ]]; then
                        echo "Manually confirm if updates are needed in the following docs:\n\n${{ steps.check-dates.outputs.scan_output }}"
                      else
                        echo "Ran successfully. No upcoming dates found for the next month."
                      fi
              run: |
                  new_issue_url=$(gh issue create \
                    --title "$TITLE" \
                    --body "$BODY" \
                    --repo "$GH_REPO")
